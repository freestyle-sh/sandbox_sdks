// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { HandleDeployCloudstateData, HandleDeployCloudstateError, HandleDeployCloudstateResponse, HandleBackupCloudstateData, HandleBackupCloudstateError, HandleBackupCloudstateResponse, HandleVerifyWildcardError, HandleVerifyWildcardResponse, HandleListDomainsError, HandleListDomainsResponse, HandleListDomainVerificationRequestsError, HandleListDomainVerificationRequestsResponse, HandleVerifyDomainData, HandleVerifyDomainError, HandleVerifyDomainResponse, HandleCreateDomainVerificationData, HandleCreateDomainVerificationError, HandleCreateDomainVerificationResponse, HandleDeleteDomainVerificationData, HandleDeleteDomainVerificationError, HandleDeleteDomainVerificationResponse, HandleListExecuteRunsData, HandleListExecuteRunsError, HandleListExecuteRunsResponse, HandleGetExecuteRunData, HandleGetExecuteRunError, HandleGetExecuteRunResponse, HandleExecuteScriptData, HandleExecuteScriptError, HandleExecuteScriptResponse, ListRepositoriesHandlerData, ListRepositoriesHandlerError, ListRepositoriesHandlerResponse, CreateRepoHandlerData, CreateRepoHandlerError, CreateRepoHandlerResponse, DeleteRepoHandlerData, DeleteRepoHandlerError, DeleteRepoHandlerResponse, HandleGetLogsData, HandleGetLogsError, HandleGetLogsResponse, HandleDeployWebData, HandleDeployWebError, HandleDeployWebResponse, HandleListWebDeploysData, HandleListWebDeploysError, HandleListWebDeploysResponse, HandleGetWebDeployDetailsData } from './types.gen';

export const client = createClient(createConfig());

/**
 * Deploy Cloudstate Project
 * Deploy a cloudstate project
 */
export const handleDeployCloudstate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeployCloudstateData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleDeployCloudstateResponse, HandleDeployCloudstateError, ThrowOnError>({
        ...options,
        url: '/cloudstate/v1/deploy'
    });
};

/**
 * Get Backup of Cloudstate Project
 * Get a backup of a cloudstate project
 */
export const handleBackupCloudstate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleBackupCloudstateData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleBackupCloudstateResponse, HandleBackupCloudstateError, ThrowOnError>({
        ...options,
        url: '/cloudstate/v1/projects/{id}/backup'
    });
};

/**
 * Provision a wildcard certificate
 * Provisions a wildcard certificate for a verified domain
 *
 *
 * This speeds up deploys on all subdomains of the domain. In order to use it, you must add the following record to your DNS config:
 *
 * `_acme-challenge.yourdomain.com` NS `dns.freestyle.sh`
 */
export const handleVerifyWildcard = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleVerifyWildcardResponse, HandleVerifyWildcardError, ThrowOnError>({
        ...options,
        url: '/domains/v1/certs/{domain}/wildcard'
    });
};

/**
 * List domains for an account
 * This lists the domains that an account has verified ownership of. This includes the *.style.dev domains the account has claimed.
 */
export const handleListDomains = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListDomainsResponse, HandleListDomainsError, ThrowOnError>({
        ...options,
        url: '/domains/v1/domains'
    });
};

/**
 * List domain verification requests for an account
 * Lists domain verification requests for the current account.
 */
export const handleListDomainVerificationRequests = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListDomainVerificationRequestsResponse, HandleListDomainVerificationRequestsError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Verify a domain
 * This checks a pre-existing verification request for a domain. To create a verification request, call the [create domain verification](/#tag/domains/POST/domains/v1/verifications) endpoint. This endpoint will check if the domain has a TXT record with the verification code. If it does, the domain will be verified.
 */
export const handleVerifyDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleVerifyDomainData, ThrowOnError>) => {
    return (options?.client ?? client).put<HandleVerifyDomainResponse, HandleVerifyDomainError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Create a domain verification request
 * This creates a Freestyle Domain Verification Request. It returns a `verificationCode` for your domain. You need to place this code in a TXT record at `_freestyle_custom_hostname.thedomain.com`, then call the [verify domain](/#tag/domains/PUT/domains/v1/verifications) endpoint with the domain to verify it.
 */
export const handleCreateDomainVerification = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleCreateDomainVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleCreateDomainVerificationResponse, HandleCreateDomainVerificationError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * Delete a domain verification request
 * This deletes a Freestyle Domain Verification Request. This does not remove the domain from the account if it has already been verified, however the verification code will no longer be valid.
 */
export const handleDeleteDomainVerification = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeleteDomainVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HandleDeleteDomainVerificationResponse, HandleDeleteDomainVerificationError, ThrowOnError>({
        ...options,
        url: '/domains/v1/verifications'
    });
};

/**
 * List execute runs
 * List execute runs.
 */
export const handleListExecuteRuns = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleListExecuteRunsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListExecuteRunsResponse, HandleListExecuteRunsError, ThrowOnError>({
        ...options,
        url: '/execute/v1/deployments'
    });
};

/**
 * Get information on execute run
 * Get information on execute run
 */
export const handleGetExecuteRun = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetExecuteRunData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetExecuteRunResponse, HandleGetExecuteRunError, ThrowOnError>({
        ...options,
        url: '/execute/v1/deployments/{deployment}'
    });
};

/**
 * Execute Code
 * Send a TypeScript or JavaScript module, get the result
 */
export const handleExecuteScript = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleExecuteScriptData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleExecuteScriptResponse, HandleExecuteScriptError, ThrowOnError>({
        ...options,
        url: '/execute/v1/script'
    });
};

/**
 * List repositories
 * List repositories.
 */
export const listRepositoriesHandler = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListRepositoriesHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRepositoriesHandlerResponse, ListRepositoriesHandlerError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo'
    });
};

/**
 * Create a repository
 * Create a repository. Once the repository is created, it will also be created on the Git server.
 * The repository name must be unique within your account.
 *
 * Once created, you can then push your code to this repository.
 *
 * The repo will be available at `git.freestyle.sh/{repo-id}`
 *
 */
export const createRepoHandler = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateRepoHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRepoHandlerResponse, CreateRepoHandlerError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo'
    });
};

/**
 * Delete a repository
 * Delete a repository. This is irreversible, and will also delete the repository on the Git server.
 */
export const deleteRepoHandler = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteRepoHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteRepoHandlerResponse, DeleteRepoHandlerError, ThrowOnError>({
        ...options,
        url: '/git/v1/repo/{repo}'
    });
};

/**
 * Deployment Logs
 * Get the logs for a deployment
 */
export const handleGetLogs = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<HandleGetLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleGetLogsResponse, HandleGetLogsError, ThrowOnError>({
        ...options,
        url: '/observability/v1/logs'
    });
};

/**
 * Deploy a Website
 * Deploy a website. Files is a map of file paths to file contents. Configuration is optional and contains additional information about the deployment.
 */
export const handleDeployWeb = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleDeployWebData, ThrowOnError>) => {
    return (options?.client ?? client).post<HandleDeployWebResponse, HandleDeployWebError, ThrowOnError>({
        ...options,
        url: '/web/v1/deploy'
    });
};

/**
 * List web deploys
 * List web deploys.
 */
export const handleListWebDeploys = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleListWebDeploysData, ThrowOnError>) => {
    return (options?.client ?? client).get<HandleListWebDeploysResponse, HandleListWebDeploysError, ThrowOnError>({
        ...options,
        url: '/web/v1/deployments'
    });
};

/**
 * Get information on web deploy
 * Get information about a web deploy by its ID.
 */
export const handleGetWebDeployDetails = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HandleGetWebDeployDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/web/v1/deployments/deployment/{deployment_id}'
    });
};