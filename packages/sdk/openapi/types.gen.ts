// This file is auto-generated by @hey-api/openapi-ts

export type FreestyleCloudstateDeployConfiguration = {
    /**
     * ID of the project to deploy, if not provided will create a new project
     */
    projectId?: (string) | null;
    /**
     * The environment variables that the cloudstate deploy can access
     */
    envVars?: {
        [key: string]: (string);
    };
};

export type FreestyleCloudstateDeployErrorResponse = {
    message: string;
};

export type FreestyleCloudstateDeployRequest = {
    classes: string;
    config?: FreestyleCloudstateDeployConfiguration;
};

export type FreestyleCloudstateDeploySuccessResponse = {
    /**
     * The id of the project deployed to
     */
    projectId: string;
};

export type FreestyleDeleteDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
    /**
     * The verification code
     */
    verificationCode: string;
};

export type FreestyleDeployWebConfiguration = {
    /**
     * The entrypoint file for the website
     */
    entrypoint?: (string) | null;
    /**
     * The custom domains for the website, eg. [\"subdomain.yourwebsite.com\"]. You may include a single *.style.dev domain here.
     */
    domains?: Array<(string)> | null;
    /**
     * Project ID was our original way of tracking deployments together, it is now deprecated and will be removed in the future. Please use the domains field to specify the domains for your project.
     * @deprecated
     */
    projectId?: (string) | null;
    /**
     * Node Modules to install for the website, a map of package names to versions, e.g. { \"express\": \"4.17.1\" }. If this and a package-lock.json are provided, the package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock is also provided, the versions here will override the versions in those lock files.
     */
    nodeModules?: {
        [key: string]: (string);
    } | null;
    /**
     * The environment variables that the website can access
     * e.g. { \"RESEND_API_KEY\": \"re_123456789\" }
     */
    envVars?: {
        [key: string]: (string);
    } | null;
    serverStartCheck?: boolean;
};

export type FreestyleDeployWebErrorResponse = {
    message: string;
};

export type FreestyleDeployWebPayload = {
    /**
     * The files to deploy, a map of file paths to file contents, e.g. { \"index.js\": {\"content\": \"your main\", \"encoding\": \"utf-8\"}, \"file2.js\": {\"content\": \"your helper\" } }
     *
     * **Do not include node modules in this bundle, they will not work**. Instead, includes a package-lock.json, bun.lockb, pnpm-lock.yaml, or yarn.lock, the node modules for the project will be installed from that lock file, or use the node_modules field in the configuration to specify the node modules to install.
     */
    files: {
        [key: string]: FreestyleFile;
    };
    config?: FreestyleDeployWebConfiguration;
};

export type FreestyleDeployWebSuccessResponse = {
    deploymentId: string;
    domains?: Array<(string)> | null;
    /**
     * @deprecated
     */
    projectId?: (string) | null;
};

export type FreestyleDomainVerificationRequest = {
    /**
     * The domain to create a verification code for
     */
    domain: string;
};

export type FreestyleExecureScriptResultError = {
    error: string;
};

export type FreestyleExecureScriptResultSuccess = {
    result: unknown;
    logs: Array<JavaScriptLog>;
};

export type FreestyleExecuteScriptParams = {
    /**
     * The JavaScript or TypeScript script to execute
     */
    script: string;
    config?: FreestyleExecuteScriptParamsConfiguration;
};

export type FreestyleExecuteScriptParamsConfiguration = {
    /**
     * The environment variables to set for the script
     */
    envVars?: {
        [key: string]: (string);
    };
    /**
     * The node modules to install for the script
     */
    nodeModules?: {
        [key: string]: (string);
    };
    /**
     * Tags for you to organize your scripts, useful for tracking what you're running
     */
    tags?: Array<(string)>;
    /**
     * The script timeout
     */
    timeout?: (string) | null;
    /**
     * If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.
     */
    peerDependencyResolution?: boolean;
};

export type FreestyleFile = {
    /**
     * The content of the file
     */
    content: string;
    /**
     * The encoding of the file. Either **utf-8** or **base64**
     */
    encoding?: string;
};

export type FreestyleLogResponseObject = {
    message: string;
};

export type FreestyleVerifyDomainRequest = {
    domain: string;
};

export type JavaScriptLog = {
    /**
     * The log message
     */
    message: string;
    /**
     * The log level
     */
    type: string;
};

export type HandleDeployCloudstateData = {
    body: FreestyleCloudstateDeployRequest;
};

export type HandleDeployCloudstateResponse = (FreestyleCloudstateDeploySuccessResponse);

export type HandleDeployCloudstateError = (FreestyleCloudstateDeployErrorResponse);

export type HandleBackupCloudstateData = {
    path: {
        id: string;
    };
};

export type HandleBackupCloudstateResponse = (Array<(number)>);

export type HandleBackupCloudstateError = (unknown);

export type HandleListDomainsResponse = (Array<{
    domain: string;
    createdAt: number;
}>);

export type HandleListDomainsError = ({
    message: string;
});

export type HandleListDomainVerificationRequestsResponse = (Array<{
    verificationCode: string;
    domain: string;
    createdAt: number;
}>);

export type HandleListDomainVerificationRequestsError = ({
    message: string;
});

export type HandleVerifyDomainData = {
    body: FreestyleVerifyDomainRequest;
};

export type HandleVerifyDomainResponse = ({
    domain: string;
});

export type HandleVerifyDomainError = ({
    message: string;
});

export type HandleCreateDomainVerificationData = {
    body: FreestyleDomainVerificationRequest;
};

export type HandleCreateDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});

export type HandleCreateDomainVerificationError = ({
    message: string;
});

export type HandleDeleteDomainVerificationData = {
    body: FreestyleDeleteDomainVerificationRequest;
};

export type HandleDeleteDomainVerificationResponse = ({
    verificationCode: string;
    domain: string;
});

export type HandleDeleteDomainVerificationError = ({
    message: string;
});

export type HandleExecuteScriptData = {
    body: FreestyleExecuteScriptParams;
};

export type HandleExecuteScriptResponse = (FreestyleExecureScriptResultSuccess);

export type HandleExecuteScriptError = (FreestyleExecureScriptResultError);

export type HandleDeployWebData = {
    body: FreestyleDeployWebPayload;
};

export type HandleDeployWebResponse = (FreestyleDeployWebSuccessResponse);

export type HandleDeployWebError = (FreestyleDeployWebErrorResponse);

export type HandleGetLogsData = {
    path: {
        id: string;
    };
};

export type HandleGetLogsResponse = (Array<FreestyleLogResponseObject>);

export type HandleGetLogsError = unknown;